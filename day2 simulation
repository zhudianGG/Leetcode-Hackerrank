59. Spiral Matrix II
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        nums=[[0]*n for _ in range(n)]
        startx,starty=0,0
        loop,mid=n//2,n//2
        count=1 #偏移量
        for offset in range(1,loop+1):
            for i in range(starty,n-offset):
                nums[startx][i]=count
                count+=1
            for i in range(startx,n-offset):
                nums[i][n-offset]=count
                count+=1
            for i in range(n-offset,starty,-1):
                #第一次正着写 到能层之后会变 注意
                nums[n-offset][i]=count
                count+=1
            for i in range(n-offset,starty,-1):
                nums[i][starty]=count
                count+=1
            startx+=1
            starty+=1
        if n%2!=0:
            nums[mid][mid]=count
        return nums
54. Spiral Matrix
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if len(matrix) == 0:
            return res
        startx,starty=0,0
        lenx,leny=len(matrix)-1,len(matrix[0])-1
        res=[]
        while(startx<=lenx and starty<=leny):
            for i in range(starty,leny+1):
                res.append(matrix[startx][i])
            startx+=1
            for i in range(startx,lenx+1):
                res.append(matrix[i][leny])
            leny-=1
            if (startx<=lenx):
                for i in range(leny,starty-1,-1):
                    res.append(matrix[lenx][i])
                lenx-=1
            #注意结束指标避免覆盖
            if (starty<=leny):
                for i in range(lenx,startx-1,-1):
                    res.append(matrix[i][starty])    
                starty+=1
        return res 
