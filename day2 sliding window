209. Minimum Size Subarray Sum
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        res=float("inf")
        Sum=0
        i=0
        for j in range(len(nums)):
            Sum+=nums[j]
            while Sum>=target:
                res=min(res,j-i+1)
                Sum-=nums[i]
                i+=1
        if res==float("inf"):
            return 0 
        else: 
            return res
76. Minimum Window Substring
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if not s or not t or len(s)<len(t):
            return ""
        t_counter=Counter(t)
        chars=len(t_counter.keys())
        s_counter=Counter()
        matches=0
        answer=''
        i,j=0,-1
        while i<len(s):
            if matches < chars:
                if j==len(s)-1:
                    return answer
                j+=1
                s_counter[s[j]]+=1
                if t_counter[s[j]]>0 and s_counter[s[j]]==t_counter[s[j]]:
                    matches+=1
            else:
                s_counter[s[i]]-=1
                if t_counter[s[i]]>0 and s_counter[s[i]]==t_counter[s[i]]-1:
                    matches-=1
                i+=1
            if matches==chars:
                if not answer:
                    answer = s[i:j+1]
                elif (j-i+1)<len(answer):
                    answer = s[i:j+1]
        return answer
904. Fruit Into Baskets
class Solution:
    def totalFruit(self, fruits: List[int]) -> int:
        left=0
        right=0
        res=0
        f_counter=Counter()
        while(right<len(fruits)):
            f_counter[fruits[right]]+=1
            right+=1
            while(len(f_counter)>2):
                f_counter[fruits[left]]-=1
                if not f_counter[fruits[left]]:
                    f_counter.pop(fruits[left])
                left+=1
            res=max(res,right-left)
        return res
